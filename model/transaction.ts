/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Location } from './location';
import { PaymentMeta } from './paymentMeta';
import { PersonalFinanceCategory } from './personalFinanceCategory';
import { TransactionAllOf } from './transactionAllOf';
import { TransactionBase } from './transactionBase';
import { TransactionCode } from './transactionCode';

/**
* A representation of a transaction
*/
export class Transaction {
    /**
    * Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
    */
    'transactionType'?: Transaction.TransactionTypeEnum;
    /**
    * The ID of a posted transaction\'s associated pending transaction, where applicable.
    */
    'pendingTransactionId': string | null;
    /**
    * The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
    */
    'categoryId': string | null;
    /**
    * A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/#categoriesget).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
    */
    'category': Array<string> | null;
    'location': Location;
    'paymentMeta': PaymentMeta;
    /**
    * The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
    */
    'accountOwner': string | null;
    /**
    * The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
    */
    'name': string;
    /**
    * The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
    */
    'originalDescription'?: string | null;
    /**
    * The ID of the account in which this transaction occurred.
    */
    'accountId': string;
    /**
    * The settled value of the transaction, denominated in the account\'s currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
    */
    'amount': number;
    /**
    * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
    */
    'isoCurrencyCode': string | null;
    /**
    * The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    */
    'unofficialCurrencyCode': string | null;
    /**
    * For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
    */
    'date': string;
    /**
    * When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
    */
    'pending': boolean;
    /**
    * The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
    */
    'transactionId': string;
    /**
    * The merchant name, as extracted by Plaid from the `name` field.
    */
    'merchantName'?: string | null;
    /**
    * The check number of the transaction. This field is only populated for check transactions.
    */
    'checkNumber'?: string | null;
    /**
    * The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
    */
    'paymentChannel': Transaction.PaymentChannelEnum;
    /**
    * The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). The `authorized_date` field uses machine learning to determine a transaction date for transactions where the `date_transacted` is not available. If the `date_transacted` field is present and not `null`, the `authorized_date` field will have the same value as the `date_transacted` field.
    */
    'authorizedDate': string | null;
    /**
    * Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
    */
    'authorizedDatetime': Date | null;
    /**
    * Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
    */
    'datetime': Date | null;
    'transactionCode': TransactionCode | null;
    'personalFinanceCategory'?: PersonalFinanceCategory & any | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "transactionType",
            "baseName": "transaction_type",
            "type": "Transaction.TransactionTypeEnum"
        },
        {
            "name": "pendingTransactionId",
            "baseName": "pending_transaction_id",
            "type": "string"
        },
        {
            "name": "categoryId",
            "baseName": "category_id",
            "type": "string"
        },
        {
            "name": "category",
            "baseName": "category",
            "type": "Array<string>"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "Location"
        },
        {
            "name": "paymentMeta",
            "baseName": "payment_meta",
            "type": "PaymentMeta"
        },
        {
            "name": "accountOwner",
            "baseName": "account_owner",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "originalDescription",
            "baseName": "original_description",
            "type": "string"
        },
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "isoCurrencyCode",
            "baseName": "iso_currency_code",
            "type": "string"
        },
        {
            "name": "unofficialCurrencyCode",
            "baseName": "unofficial_currency_code",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "pending",
            "baseName": "pending",
            "type": "boolean"
        },
        {
            "name": "transactionId",
            "baseName": "transaction_id",
            "type": "string"
        },
        {
            "name": "merchantName",
            "baseName": "merchant_name",
            "type": "string"
        },
        {
            "name": "checkNumber",
            "baseName": "check_number",
            "type": "string"
        },
        {
            "name": "paymentChannel",
            "baseName": "payment_channel",
            "type": "Transaction.PaymentChannelEnum"
        },
        {
            "name": "authorizedDate",
            "baseName": "authorized_date",
            "type": "string"
        },
        {
            "name": "authorizedDatetime",
            "baseName": "authorized_datetime",
            "type": "Date"
        },
        {
            "name": "datetime",
            "baseName": "datetime",
            "type": "Date"
        },
        {
            "name": "transactionCode",
            "baseName": "transaction_code",
            "type": "TransactionCode"
        },
        {
            "name": "personalFinanceCategory",
            "baseName": "personal_finance_category",
            "type": "PersonalFinanceCategory & any"
        }    ];

    static getAttributeTypeMap() {
        return Transaction.attributeTypeMap;
    }
}

export namespace Transaction {
    export enum TransactionTypeEnum {
        Digital = <any> 'digital',
        Place = <any> 'place',
        Special = <any> 'special',
        Unresolved = <any> 'unresolved'
    }
    export enum PaymentChannelEnum {
        Online = <any> 'online',
        InStore = <any> 'in store',
        Other = <any> 'other'
    }
}
