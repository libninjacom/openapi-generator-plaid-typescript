/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* A transaction within an investment account.
*/
export class InvestmentTransaction extends null<String, any> {
    /**
    * The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
    */
    'investmentTransactionId': string;
    /**
    * A legacy field formerly used internally by Plaid to identify certain canceled transactions.
    */
    'cancelTransactionId'?: string | null;
    /**
    * The `account_id` of the account against which this transaction posted.
    */
    'accountId': string;
    /**
    * The `security_id` to which this transaction is related.
    */
    'securityId': string | null;
    /**
    * The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
    */
    'date': string;
    /**
    * The institutionâ€™s description of the transaction.
    */
    'name': string;
    /**
    * The number of units of the security involved in this transaction.
    */
    'quantity': number;
    /**
    * The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
    */
    'amount': number;
    /**
    * The price of the security at which this transaction occurred.
    */
    'price': number;
    /**
    * The combined value of all fees applied to this transaction
    */
    'fees': number | null;
    /**
    * Value is one of the following: `buy`: Buying an investment `sell`: Selling an investment `cancel`: A cancellation of a pending transaction `cash`: Activity that modifies a cash position `fee`: A fee on the account `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer  For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
    */
    'type': InvestmentTransaction.TypeEnum;
    /**
    * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
    */
    'subtype': InvestmentTransaction.SubtypeEnum;
    /**
    * The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
    */
    'isoCurrencyCode': string | null;
    /**
    * The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
    */
    'unofficialCurrencyCode': string | null;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "investmentTransactionId",
            "baseName": "investment_transaction_id",
            "type": "string"
        },
        {
            "name": "cancelTransactionId",
            "baseName": "cancel_transaction_id",
            "type": "string"
        },
        {
            "name": "accountId",
            "baseName": "account_id",
            "type": "string"
        },
        {
            "name": "securityId",
            "baseName": "security_id",
            "type": "string"
        },
        {
            "name": "date",
            "baseName": "date",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "price",
            "baseName": "price",
            "type": "number"
        },
        {
            "name": "fees",
            "baseName": "fees",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "InvestmentTransaction.TypeEnum"
        },
        {
            "name": "subtype",
            "baseName": "subtype",
            "type": "InvestmentTransaction.SubtypeEnum"
        },
        {
            "name": "isoCurrencyCode",
            "baseName": "iso_currency_code",
            "type": "string"
        },
        {
            "name": "unofficialCurrencyCode",
            "baseName": "unofficial_currency_code",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(InvestmentTransaction.attributeTypeMap);
    }
}

export namespace InvestmentTransaction {
    export enum TypeEnum {
        Buy = <any> 'buy',
        Sell = <any> 'sell',
        Cancel = <any> 'cancel',
        Cash = <any> 'cash',
        Fee = <any> 'fee',
        Transfer = <any> 'transfer'
    }
    export enum SubtypeEnum {
        AccountFee = <any> 'account fee',
        Adjustment = <any> 'adjustment',
        Assignment = <any> 'assignment',
        Buy = <any> 'buy',
        BuyToCover = <any> 'buy to cover',
        Contribution = <any> 'contribution',
        Deposit = <any> 'deposit',
        Distribution = <any> 'distribution',
        Dividend = <any> 'dividend',
        DividendReinvestment = <any> 'dividend reinvestment',
        Exercise = <any> 'exercise',
        Expire = <any> 'expire',
        FundFee = <any> 'fund fee',
        Interest = <any> 'interest',
        InterestReceivable = <any> 'interest receivable',
        InterestReinvestment = <any> 'interest reinvestment',
        LegalFee = <any> 'legal fee',
        LoanPayment = <any> 'loan payment',
        LongTermCapitalGain = <any> 'long-term capital gain',
        LongTermCapitalGainReinvestment = <any> 'long-term capital gain reinvestment',
        ManagementFee = <any> 'management fee',
        MarginExpense = <any> 'margin expense',
        Merger = <any> 'merger',
        MiscellaneousFee = <any> 'miscellaneous fee',
        NonQualifiedDividend = <any> 'non-qualified dividend',
        NonResidentTax = <any> 'non-resident tax',
        PendingCredit = <any> 'pending credit',
        PendingDebit = <any> 'pending debit',
        QualifiedDividend = <any> 'qualified dividend',
        Rebalance = <any> 'rebalance',
        ReturnOfPrincipal = <any> 'return of principal',
        Sell = <any> 'sell',
        SellShort = <any> 'sell short',
        ShortTermCapitalGain = <any> 'short-term capital gain',
        ShortTermCapitalGainReinvestment = <any> 'short-term capital gain reinvestment',
        SpinOff = <any> 'spin off',
        Split = <any> 'split',
        StockDistribution = <any> 'stock distribution',
        Tax = <any> 'tax',
        TaxWithheld = <any> 'tax withheld',
        Transfer = <any> 'transfer',
        TransferFee = <any> 'transfer fee',
        TrustFee = <any> 'trust fee',
        UnqualifiedGain = <any> 'unqualified gain',
        Withdrawal = <any> 'withdrawal'
    }
}
