/**
 * The Plaid API
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.64.13
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { AccountsBalanceGetRequest } from '../model/accountsBalanceGetRequest';
import { AccountsGetRequest } from '../model/accountsGetRequest';
import { AccountsGetResponse } from '../model/accountsGetResponse';
import { ApplicationGetRequest } from '../model/applicationGetRequest';
import { ApplicationGetResponse } from '../model/applicationGetResponse';
import { AssetReportAuditCopyCreateRequest } from '../model/assetReportAuditCopyCreateRequest';
import { AssetReportAuditCopyCreateResponse } from '../model/assetReportAuditCopyCreateResponse';
import { AssetReportAuditCopyGetRequest } from '../model/assetReportAuditCopyGetRequest';
import { AssetReportAuditCopyRemoveRequest } from '../model/assetReportAuditCopyRemoveRequest';
import { AssetReportAuditCopyRemoveResponse } from '../model/assetReportAuditCopyRemoveResponse';
import { AssetReportCreateRequest } from '../model/assetReportCreateRequest';
import { AssetReportCreateResponse } from '../model/assetReportCreateResponse';
import { AssetReportFilterRequest } from '../model/assetReportFilterRequest';
import { AssetReportFilterResponse } from '../model/assetReportFilterResponse';
import { AssetReportGetRequest } from '../model/assetReportGetRequest';
import { AssetReportGetResponse } from '../model/assetReportGetResponse';
import { AssetReportPDFGetRequest } from '../model/assetReportPDFGetRequest';
import { AssetReportRefreshRequest } from '../model/assetReportRefreshRequest';
import { AssetReportRefreshResponse } from '../model/assetReportRefreshResponse';
import { AssetReportRemoveRequest } from '../model/assetReportRemoveRequest';
import { AssetReportRemoveResponse } from '../model/assetReportRemoveResponse';
import { AuthGetRequest } from '../model/authGetRequest';
import { AuthGetResponse } from '../model/authGetResponse';
import { BankTransferBalanceGetRequest } from '../model/bankTransferBalanceGetRequest';
import { BankTransferBalanceGetResponse } from '../model/bankTransferBalanceGetResponse';
import { BankTransferCancelRequest } from '../model/bankTransferCancelRequest';
import { BankTransferCancelResponse } from '../model/bankTransferCancelResponse';
import { BankTransferCreateRequest } from '../model/bankTransferCreateRequest';
import { BankTransferCreateResponse } from '../model/bankTransferCreateResponse';
import { BankTransferEventListRequest } from '../model/bankTransferEventListRequest';
import { BankTransferEventListResponse } from '../model/bankTransferEventListResponse';
import { BankTransferEventSyncRequest } from '../model/bankTransferEventSyncRequest';
import { BankTransferEventSyncResponse } from '../model/bankTransferEventSyncResponse';
import { BankTransferGetRequest } from '../model/bankTransferGetRequest';
import { BankTransferGetResponse } from '../model/bankTransferGetResponse';
import { BankTransferListRequest } from '../model/bankTransferListRequest';
import { BankTransferListResponse } from '../model/bankTransferListResponse';
import { BankTransferMigrateAccountRequest } from '../model/bankTransferMigrateAccountRequest';
import { BankTransferMigrateAccountResponse } from '../model/bankTransferMigrateAccountResponse';
import { BankTransferSweepGetRequest } from '../model/bankTransferSweepGetRequest';
import { BankTransferSweepGetResponse } from '../model/bankTransferSweepGetResponse';
import { BankTransferSweepListRequest } from '../model/bankTransferSweepListRequest';
import { BankTransferSweepListResponse } from '../model/bankTransferSweepListResponse';
import { CategoriesGetResponse } from '../model/categoriesGetResponse';
import { DepositSwitchAltCreateRequest } from '../model/depositSwitchAltCreateRequest';
import { DepositSwitchAltCreateResponse } from '../model/depositSwitchAltCreateResponse';
import { DepositSwitchCreateRequest } from '../model/depositSwitchCreateRequest';
import { DepositSwitchCreateResponse } from '../model/depositSwitchCreateResponse';
import { DepositSwitchGetRequest } from '../model/depositSwitchGetRequest';
import { DepositSwitchGetResponse } from '../model/depositSwitchGetResponse';
import { DepositSwitchTokenCreateRequest } from '../model/depositSwitchTokenCreateRequest';
import { DepositSwitchTokenCreateResponse } from '../model/depositSwitchTokenCreateResponse';
import { EmployersSearchRequest } from '../model/employersSearchRequest';
import { EmployersSearchResponse } from '../model/employersSearchResponse';
import { EmploymentVerificationGetRequest } from '../model/employmentVerificationGetRequest';
import { EmploymentVerificationGetResponse } from '../model/employmentVerificationGetResponse';
import { IdentityGetRequest } from '../model/identityGetRequest';
import { IdentityGetResponse } from '../model/identityGetResponse';
import { IncomeVerificationCreateRequest } from '../model/incomeVerificationCreateRequest';
import { IncomeVerificationCreateResponse } from '../model/incomeVerificationCreateResponse';
import { IncomeVerificationDocumentsDownloadRequest } from '../model/incomeVerificationDocumentsDownloadRequest';
import { IncomeVerificationPaystubGetRequest } from '../model/incomeVerificationPaystubGetRequest';
import { IncomeVerificationPaystubGetResponse } from '../model/incomeVerificationPaystubGetResponse';
import { IncomeVerificationPaystubsGetRequest } from '../model/incomeVerificationPaystubsGetRequest';
import { IncomeVerificationPaystubsGetResponse } from '../model/incomeVerificationPaystubsGetResponse';
import { IncomeVerificationPrecheckRequest } from '../model/incomeVerificationPrecheckRequest';
import { IncomeVerificationPrecheckResponse } from '../model/incomeVerificationPrecheckResponse';
import { IncomeVerificationRefreshRequest } from '../model/incomeVerificationRefreshRequest';
import { IncomeVerificationRefreshResponse } from '../model/incomeVerificationRefreshResponse';
import { IncomeVerificationSummaryGetRequest } from '../model/incomeVerificationSummaryGetRequest';
import { IncomeVerificationSummaryGetResponse } from '../model/incomeVerificationSummaryGetResponse';
import { IncomeVerificationTaxformsGetRequest } from '../model/incomeVerificationTaxformsGetRequest';
import { IncomeVerificationTaxformsGetResponse } from '../model/incomeVerificationTaxformsGetResponse';
import { InstitutionsGetByIdRequest } from '../model/institutionsGetByIdRequest';
import { InstitutionsGetByIdResponse } from '../model/institutionsGetByIdResponse';
import { InstitutionsGetRequest } from '../model/institutionsGetRequest';
import { InstitutionsGetResponse } from '../model/institutionsGetResponse';
import { InstitutionsSearchRequest } from '../model/institutionsSearchRequest';
import { InstitutionsSearchResponse } from '../model/institutionsSearchResponse';
import { InvestmentsHoldingsGetRequest } from '../model/investmentsHoldingsGetRequest';
import { InvestmentsHoldingsGetResponse } from '../model/investmentsHoldingsGetResponse';
import { InvestmentsTransactionsGetRequest } from '../model/investmentsTransactionsGetRequest';
import { InvestmentsTransactionsGetResponse } from '../model/investmentsTransactionsGetResponse';
import { ItemAccessTokenInvalidateRequest } from '../model/itemAccessTokenInvalidateRequest';
import { ItemAccessTokenInvalidateResponse } from '../model/itemAccessTokenInvalidateResponse';
import { ItemApplicationListRequest } from '../model/itemApplicationListRequest';
import { ItemApplicationListResponse } from '../model/itemApplicationListResponse';
import { ItemApplicationScopesUpdateRequest } from '../model/itemApplicationScopesUpdateRequest';
import { ItemApplicationScopesUpdateResponse } from '../model/itemApplicationScopesUpdateResponse';
import { ItemGetRequest } from '../model/itemGetRequest';
import { ItemGetResponse } from '../model/itemGetResponse';
import { ItemImportRequest } from '../model/itemImportRequest';
import { ItemImportResponse } from '../model/itemImportResponse';
import { ItemPublicTokenCreateRequest } from '../model/itemPublicTokenCreateRequest';
import { ItemPublicTokenCreateResponse } from '../model/itemPublicTokenCreateResponse';
import { ItemPublicTokenExchangeRequest } from '../model/itemPublicTokenExchangeRequest';
import { ItemPublicTokenExchangeResponse } from '../model/itemPublicTokenExchangeResponse';
import { ItemRemoveRequest } from '../model/itemRemoveRequest';
import { ItemRemoveResponse } from '../model/itemRemoveResponse';
import { ItemWebhookUpdateRequest } from '../model/itemWebhookUpdateRequest';
import { ItemWebhookUpdateResponse } from '../model/itemWebhookUpdateResponse';
import { LiabilitiesGetRequest } from '../model/liabilitiesGetRequest';
import { LiabilitiesGetResponse } from '../model/liabilitiesGetResponse';
import { LinkTokenCreateRequest } from '../model/linkTokenCreateRequest';
import { LinkTokenCreateResponse } from '../model/linkTokenCreateResponse';
import { LinkTokenGetRequest } from '../model/linkTokenGetRequest';
import { LinkTokenGetResponse } from '../model/linkTokenGetResponse';
import { PaymentInitiationPaymentCreateRequest } from '../model/paymentInitiationPaymentCreateRequest';
import { PaymentInitiationPaymentCreateResponse } from '../model/paymentInitiationPaymentCreateResponse';
import { PaymentInitiationPaymentGetRequest } from '../model/paymentInitiationPaymentGetRequest';
import { PaymentInitiationPaymentGetResponse } from '../model/paymentInitiationPaymentGetResponse';
import { PaymentInitiationPaymentListRequest } from '../model/paymentInitiationPaymentListRequest';
import { PaymentInitiationPaymentListResponse } from '../model/paymentInitiationPaymentListResponse';
import { PaymentInitiationPaymentReverseRequest } from '../model/paymentInitiationPaymentReverseRequest';
import { PaymentInitiationPaymentReverseResponse } from '../model/paymentInitiationPaymentReverseResponse';
import { PaymentInitiationPaymentTokenCreateRequest } from '../model/paymentInitiationPaymentTokenCreateRequest';
import { PaymentInitiationPaymentTokenCreateResponse } from '../model/paymentInitiationPaymentTokenCreateResponse';
import { PaymentInitiationRecipientCreateRequest } from '../model/paymentInitiationRecipientCreateRequest';
import { PaymentInitiationRecipientCreateResponse } from '../model/paymentInitiationRecipientCreateResponse';
import { PaymentInitiationRecipientGetRequest } from '../model/paymentInitiationRecipientGetRequest';
import { PaymentInitiationRecipientGetResponse } from '../model/paymentInitiationRecipientGetResponse';
import { PaymentInitiationRecipientListRequest } from '../model/paymentInitiationRecipientListRequest';
import { PaymentInitiationRecipientListResponse } from '../model/paymentInitiationRecipientListResponse';
import { ProcessorApexProcessorTokenCreateRequest } from '../model/processorApexProcessorTokenCreateRequest';
import { ProcessorAuthGetRequest } from '../model/processorAuthGetRequest';
import { ProcessorAuthGetResponse } from '../model/processorAuthGetResponse';
import { ProcessorBalanceGetRequest } from '../model/processorBalanceGetRequest';
import { ProcessorBalanceGetResponse } from '../model/processorBalanceGetResponse';
import { ProcessorBankTransferCreateRequest } from '../model/processorBankTransferCreateRequest';
import { ProcessorBankTransferCreateResponse } from '../model/processorBankTransferCreateResponse';
import { ProcessorIdentityGetRequest } from '../model/processorIdentityGetRequest';
import { ProcessorIdentityGetResponse } from '../model/processorIdentityGetResponse';
import { ProcessorStripeBankAccountTokenCreateRequest } from '../model/processorStripeBankAccountTokenCreateRequest';
import { ProcessorStripeBankAccountTokenCreateResponse } from '../model/processorStripeBankAccountTokenCreateResponse';
import { ProcessorTokenCreateRequest } from '../model/processorTokenCreateRequest';
import { ProcessorTokenCreateResponse } from '../model/processorTokenCreateResponse';
import { SandboxBankTransferFireWebhookRequest } from '../model/sandboxBankTransferFireWebhookRequest';
import { SandboxBankTransferFireWebhookResponse } from '../model/sandboxBankTransferFireWebhookResponse';
import { SandboxBankTransferSimulateRequest } from '../model/sandboxBankTransferSimulateRequest';
import { SandboxBankTransferSimulateResponse } from '../model/sandboxBankTransferSimulateResponse';
import { SandboxIncomeFireWebhookRequest } from '../model/sandboxIncomeFireWebhookRequest';
import { SandboxIncomeFireWebhookResponse } from '../model/sandboxIncomeFireWebhookResponse';
import { SandboxItemFireWebhookRequest } from '../model/sandboxItemFireWebhookRequest';
import { SandboxItemFireWebhookResponse } from '../model/sandboxItemFireWebhookResponse';
import { SandboxItemResetLoginRequest } from '../model/sandboxItemResetLoginRequest';
import { SandboxItemResetLoginResponse } from '../model/sandboxItemResetLoginResponse';
import { SandboxItemSetVerificationStatusRequest } from '../model/sandboxItemSetVerificationStatusRequest';
import { SandboxItemSetVerificationStatusResponse } from '../model/sandboxItemSetVerificationStatusResponse';
import { SandboxOauthSelectAccountsRequest } from '../model/sandboxOauthSelectAccountsRequest';
import { SandboxProcessorTokenCreateRequest } from '../model/sandboxProcessorTokenCreateRequest';
import { SandboxProcessorTokenCreateResponse } from '../model/sandboxProcessorTokenCreateResponse';
import { SandboxPublicTokenCreateRequest } from '../model/sandboxPublicTokenCreateRequest';
import { SandboxPublicTokenCreateResponse } from '../model/sandboxPublicTokenCreateResponse';
import { SandboxTransferRepaymentSimulateRequest } from '../model/sandboxTransferRepaymentSimulateRequest';
import { SandboxTransferRepaymentSimulateResponse } from '../model/sandboxTransferRepaymentSimulateResponse';
import { SandboxTransferSimulateRequest } from '../model/sandboxTransferSimulateRequest';
import { SandboxTransferSimulateResponse } from '../model/sandboxTransferSimulateResponse';
import { SandboxTransferSweepSimulateRequest } from '../model/sandboxTransferSweepSimulateRequest';
import { SandboxTransferSweepSimulateResponse } from '../model/sandboxTransferSweepSimulateResponse';
import { SignalDecisionReportRequest } from '../model/signalDecisionReportRequest';
import { SignalDecisionReportResponse } from '../model/signalDecisionReportResponse';
import { SignalEvaluateRequest } from '../model/signalEvaluateRequest';
import { SignalEvaluateResponse } from '../model/signalEvaluateResponse';
import { SignalReturnReportRequest } from '../model/signalReturnReportRequest';
import { SignalReturnReportResponse } from '../model/signalReturnReportResponse';
import { TransactionsGetRequest } from '../model/transactionsGetRequest';
import { TransactionsGetResponse } from '../model/transactionsGetResponse';
import { TransactionsRecurringGetRequest } from '../model/transactionsRecurringGetRequest';
import { TransactionsRecurringGetResponse } from '../model/transactionsRecurringGetResponse';
import { TransactionsRefreshRequest } from '../model/transactionsRefreshRequest';
import { TransactionsRefreshResponse } from '../model/transactionsRefreshResponse';
import { TransactionsSyncRequest } from '../model/transactionsSyncRequest';
import { TransactionsSyncResponse } from '../model/transactionsSyncResponse';
import { TransferAuthorizationCreateRequest } from '../model/transferAuthorizationCreateRequest';
import { TransferAuthorizationCreateResponse } from '../model/transferAuthorizationCreateResponse';
import { TransferCancelRequest } from '../model/transferCancelRequest';
import { TransferCancelResponse } from '../model/transferCancelResponse';
import { TransferCreateRequest } from '../model/transferCreateRequest';
import { TransferCreateResponse } from '../model/transferCreateResponse';
import { TransferEventListRequest } from '../model/transferEventListRequest';
import { TransferEventListResponse } from '../model/transferEventListResponse';
import { TransferEventSyncRequest } from '../model/transferEventSyncRequest';
import { TransferEventSyncResponse } from '../model/transferEventSyncResponse';
import { TransferGetRequest } from '../model/transferGetRequest';
import { TransferGetResponse } from '../model/transferGetResponse';
import { TransferIntentCreateRequest } from '../model/transferIntentCreateRequest';
import { TransferIntentCreateResponse } from '../model/transferIntentCreateResponse';
import { TransferIntentGetRequest } from '../model/transferIntentGetRequest';
import { TransferIntentGetResponse } from '../model/transferIntentGetResponse';
import { TransferListRequest } from '../model/transferListRequest';
import { TransferListResponse } from '../model/transferListResponse';
import { TransferRepaymentListRequest } from '../model/transferRepaymentListRequest';
import { TransferRepaymentListResponse } from '../model/transferRepaymentListResponse';
import { TransferRepaymentReturnListRequest } from '../model/transferRepaymentReturnListRequest';
import { TransferRepaymentReturnListResponse } from '../model/transferRepaymentReturnListResponse';
import { TransferSweepGetRequest } from '../model/transferSweepGetRequest';
import { TransferSweepGetResponse } from '../model/transferSweepGetResponse';
import { TransferSweepListRequest } from '../model/transferSweepListRequest';
import { TransferSweepListResponse } from '../model/transferSweepListResponse';
import { WalletGetRequest } from '../model/walletGetRequest';
import { WalletGetResponse } from '../model/walletGetResponse';
import { WalletTransactionExecuteRequest } from '../model/walletTransactionExecuteRequest';
import { WalletTransactionExecuteResponse } from '../model/walletTransactionExecuteResponse';
import { WalletTransactionsListRequest } from '../model/walletTransactionsListRequest';
import { WalletTransactionsListResponse } from '../model/walletTransactionsListResponse';
import { WebhookVerificationKeyGetRequest } from '../model/webhookVerificationKeyGetRequest';
import { WebhookVerificationKeyGetResponse } from '../model/webhookVerificationKeyGetResponse';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://production.plaid.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum PlaidApiApiKeys {
    clientId,
    plaidVersion,
    secret,
}

export class PlaidApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'clientId': new ApiKeyAuth('header', 'PLAID-CLIENT-ID'),
        'plaidVersion': new ApiKeyAuth('header', 'Plaid-Version'),
        'secret': new ApiKeyAuth('header', 'PLAID-SECRET'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: PlaidApiApiKeys, value: string) {
        (this.authentications as any)[PlaidApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link.
     * @summary Retrieve real-time balance data
     * @param accountsBalanceGetRequest 
     */
    public async accountsBalanceGet (accountsBalanceGetRequest: AccountsBalanceGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AccountsGetResponse;  }> {
        const localVarPath = this.basePath + '/accounts/balance/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountsBalanceGetRequest' is not null or undefined
        if (accountsBalanceGetRequest === null || accountsBalanceGetRequest === undefined) {
            throw new Error('Required parameter accountsBalanceGetRequest was null or undefined when calling accountsBalanceGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(accountsBalanceGetRequest, "AccountsBalanceGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AccountsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AccountsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.  This endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/webhooks/#item-new_accounts_available) webhook and then use Link\'s [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.  This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     * @summary Retrieve accounts
     * @param accountsGetRequest 
     */
    public async accountsGet (accountsGetRequest: AccountsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AccountsGetResponse;  }> {
        const localVarPath = this.basePath + '/accounts/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'accountsGetRequest' is not null or undefined
        if (accountsGetRequest === null || accountsGetRequest === undefined) {
            throw new Error('Required parameter accountsGetRequest was null or undefined when calling accountsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(accountsGetRequest, "AccountsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AccountsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AccountsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     * @summary Retrieve information about a Plaid application
     * @param applicationGetRequest 
     */
    public async applicationGet (applicationGetRequest: ApplicationGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ApplicationGetResponse;  }> {
        const localVarPath = this.basePath + '/application/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'applicationGetRequest' is not null or undefined
        if (applicationGetRequest === null || applicationGetRequest === undefined) {
            throw new Error('Required parameter applicationGetRequest was null or undefined when calling applicationGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(applicationGetRequest, "ApplicationGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ApplicationGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ApplicationGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.  To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     * @summary Create Asset Report Audit Copy
     * @param assetReportAuditCopyCreateRequest 
     */
    public async assetReportAuditCopyCreate (assetReportAuditCopyCreateRequest: AssetReportAuditCopyCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportAuditCopyCreateResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/audit_copy/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportAuditCopyCreateRequest' is not null or undefined
        if (assetReportAuditCopyCreateRequest === null || assetReportAuditCopyCreateRequest === undefined) {
            throw new Error('Required parameter assetReportAuditCopyCreateRequest was null or undefined when calling assetReportAuditCopyCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportAuditCopyCreateRequest, "AssetReportAuditCopyCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportAuditCopyCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportAuditCopyCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     * @summary Retrieve an Asset Report Audit Copy
     * @param assetReportAuditCopyGetRequest 
     */
    public async assetReportAuditCopyGet (assetReportAuditCopyGetRequest: AssetReportAuditCopyGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportGetResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/audit_copy/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportAuditCopyGetRequest' is not null or undefined
        if (assetReportAuditCopyGetRequest === null || assetReportAuditCopyGetRequest === undefined) {
            throw new Error('Required parameter assetReportAuditCopyGetRequest was null or undefined when calling assetReportAuditCopyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportAuditCopyGetRequest, "AssetReportAuditCopyGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     * @summary Remove Asset Report Audit Copy
     * @param assetReportAuditCopyRemoveRequest 
     */
    public async assetReportAuditCopyRemove (assetReportAuditCopyRemoveRequest: AssetReportAuditCopyRemoveRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportAuditCopyRemoveResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/audit_copy/remove';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportAuditCopyRemoveRequest' is not null or undefined
        if (assetReportAuditCopyRemoveRequest === null || assetReportAuditCopyRemoveRequest === undefined) {
            throw new Error('Required parameter assetReportAuditCopyRemoveRequest was null or undefined when calling assetReportAuditCopyRemove.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportAuditCopyRemoveRequest, "AssetReportAuditCopyRemoveRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportAuditCopyRemoveResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportAuditCopyRemoveResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.  The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/webhooks/#assets-webhooks).  The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     * @summary Create an Asset Report
     * @param assetReportCreateRequest 
     */
    public async assetReportCreate (assetReportCreateRequest: AssetReportCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportCreateResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportCreateRequest' is not null or undefined
        if (assetReportCreateRequest === null || assetReportCreateRequest === undefined) {
            throw new Error('Required parameter assetReportCreateRequest was null or undefined when calling assetReportCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportCreateRequest, "AssetReportCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.  To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report\'s data.  Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.  Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook once generation of the filtered Asset Report has completed.
     * @summary Filter Asset Report
     * @param assetReportFilterRequest 
     */
    public async assetReportFilter (assetReportFilterRequest: AssetReportFilterRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportFilterResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/filter';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportFilterRequest' is not null or undefined
        if (assetReportFilterRequest === null || assetReportFilterRequest === undefined) {
            throw new Error('Required parameter assetReportFilterRequest was null or undefined when calling assetReportFilter.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportFilterRequest, "AssetReportFilterRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportFilterResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportFilterResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.  To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
     * @summary Retrieve an Asset Report
     * @param assetReportGetRequest 
     */
    public async assetReportGet (assetReportGetRequest: AssetReportGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportGetResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportGetRequest' is not null or undefined
        if (assetReportGetRequest === null || assetReportGetRequest === undefined) {
            throw new Error('Required parameter assetReportGetRequest was null or undefined when calling assetReportGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportGetRequest, "AssetReportGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/webhooks) webhook to fire, indicating that the Report is ready to be retrieved.  The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.  [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     * @summary Retrieve a PDF Asset Report
     * @param assetReportPDFGetRequest 
     */
    public async assetReportPdfGet (assetReportPDFGetRequest: AssetReportPDFGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Buffer;  }> {
        const localVarPath = this.basePath + '/asset_report/pdf/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/pdf'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportPDFGetRequest' is not null or undefined
        if (assetReportPDFGetRequest === null || assetReportPDFGetRequest === undefined) {
            throw new Error('Required parameter assetReportPDFGetRequest was null or undefined when calling assetReportPdfGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
            body: ObjectSerializer.serialize(assetReportPDFGetRequest, "AssetReportPDFGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Buffer");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * An Asset Report is an immutable snapshot of a user\'s assets. In order to \"refresh\" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.  The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string (\"\") for any previously-populated fields you would like set as empty.
     * @summary Refresh an Asset Report
     * @param assetReportRefreshRequest 
     */
    public async assetReportRefresh (assetReportRefreshRequest: AssetReportRefreshRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportRefreshResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/refresh';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportRefreshRequest' is not null or undefined
        if (assetReportRefreshRequest === null || assetReportRefreshRequest === undefined) {
            throw new Error('Required parameter assetReportRefreshRequest was null or undefined when calling assetReportRefresh.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportRefreshRequest, "AssetReportRefreshRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportRefreshResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportRefreshResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.  The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     * @summary Delete an Asset Report
     * @param assetReportRemoveRequest 
     */
    public async assetReportRemove (assetReportRemoveRequest: AssetReportRemoveRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AssetReportRemoveResponse;  }> {
        const localVarPath = this.basePath + '/asset_report/remove';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'assetReportRemoveRequest' is not null or undefined
        if (assetReportRemoveRequest === null || assetReportRemoveRequest === undefined) {
            throw new Error('Required parameter assetReportRemoveRequest was null or undefined when calling assetReportRemove.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(assetReportRemoveRequest, "AssetReportRemoveRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AssetReportRemoveResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AssetReportRemoveResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item\'s checking and savings accounts, along with high-level account data and balances when available.  Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.  Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.  Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     * @summary Retrieve auth data
     * @param authGetRequest 
     */
    public async authGet (authGetRequest: AuthGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: AuthGetResponse;  }> {
        const localVarPath = this.basePath + '/auth/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'authGetRequest' is not null or undefined
        if (authGetRequest === null || authGetRequest === undefined) {
            throw new Error('Required parameter authGetRequest was null or undefined when calling authGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(authGetRequest, "AuthGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: AuthGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "AuthGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.  The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.  Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     * @summary Get balance of your Bank Transfer account
     * @param bankTransferBalanceGetRequest 
     */
    public async bankTransferBalanceGet (bankTransferBalanceGetRequest: BankTransferBalanceGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferBalanceGetResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/balance/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferBalanceGetRequest' is not null or undefined
        if (bankTransferBalanceGetRequest === null || bankTransferBalanceGetRequest === undefined) {
            throw new Error('Required parameter bankTransferBalanceGetRequest was null or undefined when calling bankTransferBalanceGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferBalanceGetRequest, "BankTransferBalanceGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferBalanceGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferBalanceGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     * @summary Cancel a bank transfer
     * @param bankTransferCancelRequest 
     */
    public async bankTransferCancel (bankTransferCancelRequest: BankTransferCancelRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferCancelResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/cancel';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferCancelRequest' is not null or undefined
        if (bankTransferCancelRequest === null || bankTransferCancelRequest === undefined) {
            throw new Error('Required parameter bankTransferCancelRequest was null or undefined when calling bankTransferCancel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferCancelRequest, "BankTransferCancelRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferCancelResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferCancelResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     * @summary Create a bank transfer
     * @param bankTransferCreateRequest 
     */
    public async bankTransferCreate (bankTransferCreateRequest: BankTransferCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferCreateResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferCreateRequest' is not null or undefined
        if (bankTransferCreateRequest === null || bankTransferCreateRequest === undefined) {
            throw new Error('Required parameter bankTransferCreateRequest was null or undefined when calling bankTransferCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferCreateRequest, "BankTransferCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria.
     * @summary List bank transfer events
     * @param bankTransferEventListRequest 
     */
    public async bankTransferEventList (bankTransferEventListRequest: BankTransferEventListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferEventListResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/event/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferEventListRequest' is not null or undefined
        if (bankTransferEventListRequest === null || bankTransferEventListRequest === undefined) {
            throw new Error('Required parameter bankTransferEventListRequest was null or undefined when calling bankTransferEventList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferEventListRequest, "BankTransferEventListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferEventListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferEventListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events.
     * @summary Sync bank transfer events
     * @param bankTransferEventSyncRequest 
     */
    public async bankTransferEventSync (bankTransferEventSyncRequest: BankTransferEventSyncRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferEventSyncResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/event/sync';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferEventSyncRequest' is not null or undefined
        if (bankTransferEventSyncRequest === null || bankTransferEventSyncRequest === undefined) {
            throw new Error('Required parameter bankTransferEventSyncRequest was null or undefined when calling bankTransferEventSync.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferEventSyncRequest, "BankTransferEventSyncRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferEventSyncResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferEventSyncResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     * @summary Retrieve a bank transfer
     * @param bankTransferGetRequest 
     */
    public async bankTransferGet (bankTransferGetRequest: BankTransferGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferGetResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferGetRequest' is not null or undefined
        if (bankTransferGetRequest === null || bankTransferGetRequest === undefined) {
            throw new Error('Required parameter bankTransferGetRequest was null or undefined when calling bankTransferGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferGetRequest, "BankTransferGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. 
     * @summary List bank transfers
     * @param bankTransferListRequest 
     */
    public async bankTransferList (bankTransferListRequest: BankTransferListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferListResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferListRequest' is not null or undefined
        if (bankTransferListRequest === null || bankTransferListRequest === undefined) {
            throw new Error('Required parameter bankTransferListRequest was null or undefined when calling bankTransferList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferListRequest, "BankTransferListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     * @summary Migrate account into Bank Transfers
     * @param bankTransferMigrateAccountRequest 
     */
    public async bankTransferMigrateAccount (bankTransferMigrateAccountRequest: BankTransferMigrateAccountRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferMigrateAccountResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/migrate_account';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferMigrateAccountRequest' is not null or undefined
        if (bankTransferMigrateAccountRequest === null || bankTransferMigrateAccountRequest === undefined) {
            throw new Error('Required parameter bankTransferMigrateAccountRequest was null or undefined when calling bankTransferMigrateAccount.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferMigrateAccountRequest, "BankTransferMigrateAccountRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferMigrateAccountResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferMigrateAccountResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param bankTransferSweepGetRequest 
     */
    public async bankTransferSweepGet (bankTransferSweepGetRequest: BankTransferSweepGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferSweepGetResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/sweep/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferSweepGetRequest' is not null or undefined
        if (bankTransferSweepGetRequest === null || bankTransferSweepGetRequest === undefined) {
            throw new Error('Required parameter bankTransferSweepGetRequest was null or undefined when calling bankTransferSweepGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferSweepGetRequest, "BankTransferSweepGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferSweepGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferSweepGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     * @summary List sweeps
     * @param bankTransferSweepListRequest 
     */
    public async bankTransferSweepList (bankTransferSweepListRequest: BankTransferSweepListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: BankTransferSweepListResponse;  }> {
        const localVarPath = this.basePath + '/bank_transfer/sweep/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'bankTransferSweepListRequest' is not null or undefined
        if (bankTransferSweepListRequest === null || bankTransferSweepListRequest === undefined) {
            throw new Error('Required parameter bankTransferSweepListRequest was null or undefined when calling bankTransferSweepList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bankTransferSweepListRequest, "BankTransferSweepListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: BankTransferSweepListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "BankTransferSweepListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     * @summary Get Categories
     * @param body 
     */
    public async categoriesGet (body: object, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CategoriesGetResponse;  }> {
        const localVarPath = this.basePath + '/categories/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling categoriesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "object")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CategoriesGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CategoriesGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.  The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     * @summary Create payment token
     * @param paymentInitiationPaymentTokenCreateRequest 
     */
    public async createPaymentToken (paymentInitiationPaymentTokenCreateRequest: PaymentInitiationPaymentTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/payment/token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationPaymentTokenCreateRequest' is not null or undefined
        if (paymentInitiationPaymentTokenCreateRequest === null || paymentInitiationPaymentTokenCreateRequest === undefined) {
            throw new Error('Required parameter paymentInitiationPaymentTokenCreateRequest was null or undefined when calling createPaymentToken.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationPaymentTokenCreateRequest, "PaymentInitiationPaymentTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationPaymentTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch without using Plaid Exchange
     * @param depositSwitchAltCreateRequest 
     */
    public async depositSwitchAltCreate (depositSwitchAltCreateRequest: DepositSwitchAltCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DepositSwitchAltCreateResponse;  }> {
        const localVarPath = this.basePath + '/deposit_switch/alt/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'depositSwitchAltCreateRequest' is not null or undefined
        if (depositSwitchAltCreateRequest === null || depositSwitchAltCreateRequest === undefined) {
            throw new Error('Required parameter depositSwitchAltCreateRequest was null or undefined when calling depositSwitchAltCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(depositSwitchAltCreateRequest, "DepositSwitchAltCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DepositSwitchAltCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DepositSwitchAltCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     * @summary Create a deposit switch
     * @param depositSwitchCreateRequest 
     */
    public async depositSwitchCreate (depositSwitchCreateRequest: DepositSwitchCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DepositSwitchCreateResponse;  }> {
        const localVarPath = this.basePath + '/deposit_switch/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'depositSwitchCreateRequest' is not null or undefined
        if (depositSwitchCreateRequest === null || depositSwitchCreateRequest === undefined) {
            throw new Error('Required parameter depositSwitchCreateRequest was null or undefined when calling depositSwitchCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(depositSwitchCreateRequest, "DepositSwitchCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DepositSwitchCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DepositSwitchCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user\'s direct deposit allocation preferences.
     * @summary Retrieve a deposit switch
     * @param depositSwitchGetRequest 
     */
    public async depositSwitchGet (depositSwitchGetRequest: DepositSwitchGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DepositSwitchGetResponse;  }> {
        const localVarPath = this.basePath + '/deposit_switch/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'depositSwitchGetRequest' is not null or undefined
        if (depositSwitchGetRequest === null || depositSwitchGetRequest === undefined) {
            throw new Error('Required parameter depositSwitchGetRequest was null or undefined when calling depositSwitchGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(depositSwitchGetRequest, "DepositSwitchGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DepositSwitchGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DepositSwitchGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. 
     * @summary Create a deposit switch token
     * @param depositSwitchTokenCreateRequest 
     */
    public async depositSwitchTokenCreate (depositSwitchTokenCreateRequest: DepositSwitchTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DepositSwitchTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/deposit_switch/token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'depositSwitchTokenCreateRequest' is not null or undefined
        if (depositSwitchTokenCreateRequest === null || depositSwitchTokenCreateRequest === undefined) {
            throw new Error('Required parameter depositSwitchTokenCreateRequest was null or undefined when calling depositSwitchTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(depositSwitchTokenCreateRequest, "DepositSwitchTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DepositSwitchTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DepositSwitchTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user\'s employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.  The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     * @summary Search employer database
     * @param employersSearchRequest 
     */
    public async employersSearch (employersSearchRequest: EmployersSearchRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EmployersSearchResponse;  }> {
        const localVarPath = this.basePath + '/employers/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'employersSearchRequest' is not null or undefined
        if (employersSearchRequest === null || employersSearchRequest === undefined) {
            throw new Error('Required parameter employersSearchRequest was null or undefined when calling employersSearch.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(employersSearchRequest, "EmployersSearchRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EmployersSearchResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EmployersSearchResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
     * @summary Retrieve a summary of an individual\'s employment information
     * @param employmentVerificationGetRequest 
     */
    public async employmentVerificationGet (employmentVerificationGetRequest: EmploymentVerificationGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: EmploymentVerificationGetResponse;  }> {
        const localVarPath = this.basePath + '/employment/verification/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'employmentVerificationGetRequest' is not null or undefined
        if (employmentVerificationGetRequest === null || employmentVerificationGetRequest === undefined) {
            throw new Error('Required parameter employmentVerificationGetRequest was null or undefined when calling employmentVerificationGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(employmentVerificationGetRequest, "EmploymentVerificationGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: EmploymentVerificationGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "EmploymentVerificationGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.  Note: This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     * @summary Retrieve identity data
     * @param identityGetRequest 
     */
    public async identityGet (identityGetRequest: IdentityGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IdentityGetResponse;  }> {
        const localVarPath = this.basePath + '/identity/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'identityGetRequest' is not null or undefined
        if (identityGetRequest === null || identityGetRequest === undefined) {
            throw new Error('Required parameter identityGetRequest was null or undefined when calling identityGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(identityGetRequest, "IdentityGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IdentityGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IdentityGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. 
     * @summary (Deprecated) Create an income verification instance
     * @param incomeVerificationCreateRequest 
     */
    public async incomeVerificationCreate (incomeVerificationCreateRequest: IncomeVerificationCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationCreateResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationCreateRequest' is not null or undefined
        if (incomeVerificationCreateRequest === null || incomeVerificationCreateRequest === undefined) {
            throw new Error('Required parameter incomeVerificationCreateRequest was null or undefined when calling incomeVerificationCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationCreateRequest, "IncomeVerificationCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.  If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available for download from the payroll provider will be available from this endpoint.  The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file. If not, the response will contain all documents associated with the verification.  The `request_id` is returned in the `Plaid-Request-ID` header.
     * @summary Download the original documents used for income verification
     * @param incomeVerificationDocumentsDownloadRequest 
     */
    public async incomeVerificationDocumentsDownload (incomeVerificationDocumentsDownloadRequest: IncomeVerificationDocumentsDownloadRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Buffer;  }> {
        const localVarPath = this.basePath + '/income/verification/documents/download';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/zip'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationDocumentsDownloadRequest' is not null or undefined
        if (incomeVerificationDocumentsDownloadRequest === null || incomeVerificationDocumentsDownloadRequest === undefined) {
            throw new Error('Required parameter incomeVerificationDocumentsDownloadRequest was null or undefined when calling incomeVerificationDocumentsDownload.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
            body: ObjectSerializer.serialize(incomeVerificationDocumentsDownloadRequest, "IncomeVerificationDocumentsDownloadRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Buffer;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Buffer");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * /income/verification/paystub/get returns information from a single paystub used for income verification
     * @summary (Deprecated) Retrieve information from a single paystub used for income verification
     * @param incomeVerificationPaystubGetRequest 
     */
    public async incomeVerificationPaystubGet (incomeVerificationPaystubGetRequest: IncomeVerificationPaystubGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationPaystubGetResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/paystub/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationPaystubGetRequest' is not null or undefined
        if (incomeVerificationPaystubGetRequest === null || incomeVerificationPaystubGetRequest === undefined) {
            throw new Error('Required parameter incomeVerificationPaystubGetRequest was null or undefined when calling incomeVerificationPaystubGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationPaystubGetRequest, "IncomeVerificationPaystubGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationPaystubGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationPaystubGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @summary Retrieve information from the paystubs used for income verification
     * @param incomeVerificationPaystubsGetRequest 
     */
    public async incomeVerificationPaystubsGet (incomeVerificationPaystubsGetRequest: IncomeVerificationPaystubsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationPaystubsGetResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/paystubs/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationPaystubsGetRequest' is not null or undefined
        if (incomeVerificationPaystubsGetRequest === null || incomeVerificationPaystubsGetRequest === undefined) {
            throw new Error('Required parameter incomeVerificationPaystubsGetRequest was null or undefined when calling incomeVerificationPaystubsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationPaystubsGetRequest, "IncomeVerificationPaystubsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationPaystubsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationPaystubsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.  While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
     * @summary Check digital income verification eligibility and optimize conversion
     * @param incomeVerificationPrecheckRequest 
     */
    public async incomeVerificationPrecheck (incomeVerificationPrecheckRequest: IncomeVerificationPrecheckRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationPrecheckResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/precheck';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationPrecheckRequest' is not null or undefined
        if (incomeVerificationPrecheckRequest === null || incomeVerificationPrecheckRequest === undefined) {
            throw new Error('Required parameter incomeVerificationPrecheckRequest was null or undefined when calling incomeVerificationPrecheck.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationPrecheckRequest, "IncomeVerificationPrecheckRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationPrecheckResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationPrecheckResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/refresh` refreshes a given income verification.
     * @summary Refresh an income verification
     * @param incomeVerificationRefreshRequest 
     */
    public async incomeVerificationRefresh (incomeVerificationRefreshRequest: IncomeVerificationRefreshRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationRefreshResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/refresh';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationRefreshRequest' is not null or undefined
        if (incomeVerificationRefreshRequest === null || incomeVerificationRefreshRequest === undefined) {
            throw new Error('Required parameter incomeVerificationRefreshRequest was null or undefined when calling incomeVerificationRefresh.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationRefreshRequest, "IncomeVerificationRefreshRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationRefreshResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationRefreshResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/summary/get` returns a verification summary for the income that was verified for an end user. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @summary (Deprecated) Retrieve a summary of information derived from income verification
     * @param incomeVerificationSummaryGetRequest 
     */
    public async incomeVerificationSummaryGet (incomeVerificationSummaryGetRequest: IncomeVerificationSummaryGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationSummaryGetResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/summary/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'incomeVerificationSummaryGetRequest' is not null or undefined
        if (incomeVerificationSummaryGetRequest === null || incomeVerificationSummaryGetRequest === undefined) {
            throw new Error('Required parameter incomeVerificationSummaryGetRequest was null or undefined when calling incomeVerificationSummaryGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(incomeVerificationSummaryGetRequest, "IncomeVerificationSummaryGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationSummaryGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationSummaryGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user\'s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     * @summary Retrieve information from the tax documents used for income verification
     * @param requestBody 
     */
    public async incomeVerificationTaxformsGet (requestBody: { [key: string]: any; }, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: IncomeVerificationTaxformsGetResponse;  }> {
        const localVarPath = this.basePath + '/income/verification/taxforms/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling incomeVerificationTaxformsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, "{ [key: string]: any; }")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: IncomeVerificationTaxformsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "IncomeVerificationTaxformsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.  If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     * @summary Get details of all supported institutions
     * @param institutionsGetRequest 
     */
    public async institutionsGet (institutionsGetRequest: InstitutionsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstitutionsGetResponse;  }> {
        const localVarPath = this.basePath + '/institutions/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'institutionsGetRequest' is not null or undefined
        if (institutionsGetRequest === null || institutionsGetRequest === undefined) {
            throw new Error('Required parameter institutionsGetRequest was null or undefined when calling institutionsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(institutionsGetRequest, "InstitutionsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstitutionsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "InstitutionsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.   Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @summary Get details of an institution
     * @param institutionsGetByIdRequest 
     */
    public async institutionsGetById (institutionsGetByIdRequest: InstitutionsGetByIdRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstitutionsGetByIdResponse;  }> {
        const localVarPath = this.basePath + '/institutions/get_by_id';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'institutionsGetByIdRequest' is not null or undefined
        if (institutionsGetByIdRequest === null || institutionsGetByIdRequest === undefined) {
            throw new Error('Required parameter institutionsGetByIdRequest was null or undefined when calling institutionsGetById.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(institutionsGetByIdRequest, "InstitutionsGetByIdRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstitutionsGetByIdResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "InstitutionsGetByIdResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.  Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead. 
     * @summary Search institutions
     * @param institutionsSearchRequest 
     */
    public async institutionsSearch (institutionsSearchRequest: InstitutionsSearchRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstitutionsSearchResponse;  }> {
        const localVarPath = this.basePath + '/institutions/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'institutionsSearchRequest' is not null or undefined
        if (institutionsSearchRequest === null || institutionsSearchRequest === undefined) {
            throw new Error('Required parameter institutionsSearchRequest was null or undefined when calling institutionsSearch.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(institutionsSearchRequest, "InstitutionsSearchRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstitutionsSearchResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "InstitutionsSearchResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     * @summary Get Investment holdings
     * @param investmentsHoldingsGetRequest 
     */
    public async investmentsHoldingsGet (investmentsHoldingsGetRequest: InvestmentsHoldingsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InvestmentsHoldingsGetResponse;  }> {
        const localVarPath = this.basePath + '/investments/holdings/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'investmentsHoldingsGetRequest' is not null or undefined
        if (investmentsHoldingsGetRequest === null || investmentsHoldingsGetRequest === undefined) {
            throw new Error('Required parameter investmentsHoldingsGetRequest was null or undefined when calling investmentsHoldingsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(investmentsHoldingsGetRequest, "InvestmentsHoldingsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InvestmentsHoldingsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "InvestmentsHoldingsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve user-authorized transaction data for investment accounts.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
     * @summary Get investment transactions
     * @param investmentsTransactionsGetRequest 
     */
    public async investmentsTransactionsGet (investmentsTransactionsGetRequest: InvestmentsTransactionsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InvestmentsTransactionsGetResponse;  }> {
        const localVarPath = this.basePath + '/investments/transactions/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'investmentsTransactionsGetRequest' is not null or undefined
        if (investmentsTransactionsGetRequest === null || investmentsTransactionsGetRequest === undefined) {
            throw new Error('Required parameter investmentsTransactionsGetRequest was null or undefined when calling investmentsTransactionsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(investmentsTransactionsGetRequest, "InvestmentsTransactionsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InvestmentsTransactionsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "InvestmentsTransactionsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.  You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`. 
     * @summary Invalidate access_token
     * @param itemAccessTokenInvalidateRequest 
     */
    public async itemAccessTokenInvalidate (itemAccessTokenInvalidateRequest: ItemAccessTokenInvalidateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemAccessTokenInvalidateResponse;  }> {
        const localVarPath = this.basePath + '/item/access_token/invalidate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemAccessTokenInvalidateRequest' is not null or undefined
        if (itemAccessTokenInvalidateRequest === null || itemAccessTokenInvalidateRequest === undefined) {
            throw new Error('Required parameter itemAccessTokenInvalidateRequest was null or undefined when calling itemAccessTokenInvalidate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemAccessTokenInvalidateRequest, "ItemAccessTokenInvalidateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemAccessTokenInvalidateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemAccessTokenInvalidateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List a user’s connected applications
     * @summary List a user’s connected applications
     * @param itemApplicationListRequest 
     */
    public async itemApplicationList (itemApplicationListRequest: ItemApplicationListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemApplicationListResponse;  }> {
        const localVarPath = this.basePath + '/item/application/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemApplicationListRequest' is not null or undefined
        if (itemApplicationListRequest === null || itemApplicationListRequest === undefined) {
            throw new Error('Required parameter itemApplicationListRequest was null or undefined when calling itemApplicationList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemApplicationListRequest, "ItemApplicationListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemApplicationListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemApplicationListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Enable consumers to update product access on selected accounts for an application.
     * @summary Update the scopes of access for a particular application
     * @param itemApplicationScopesUpdateRequest 
     */
    public async itemApplicationScopesUpdate (itemApplicationScopesUpdateRequest: ItemApplicationScopesUpdateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemApplicationScopesUpdateResponse;  }> {
        const localVarPath = this.basePath + '/item/application/scopes/update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemApplicationScopesUpdateRequest' is not null or undefined
        if (itemApplicationScopesUpdateRequest === null || itemApplicationScopesUpdateRequest === undefined) {
            throw new Error('Required parameter itemApplicationScopesUpdateRequest was null or undefined when calling itemApplicationScopesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemApplicationScopesUpdateRequest, "ItemApplicationScopesUpdateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemApplicationScopesUpdateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemApplicationScopesUpdateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).  If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.  A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.  The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     * @summary Create public token
     * @param itemPublicTokenCreateRequest 
     */
    public async itemCreatePublicToken (itemPublicTokenCreateRequest: ItemPublicTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemPublicTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/item/public_token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemPublicTokenCreateRequest' is not null or undefined
        if (itemPublicTokenCreateRequest === null || itemPublicTokenCreateRequest === undefined) {
            throw new Error('Required parameter itemPublicTokenCreateRequest was null or undefined when calling itemCreatePublicToken.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemPublicTokenCreateRequest, "ItemPublicTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemPublicTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemPublicTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns information about the status of an Item.
     * @summary Retrieve an Item
     * @param itemGetRequest 
     */
    public async itemGet (itemGetRequest: ItemGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemGetResponse;  }> {
        const localVarPath = this.basePath + '/item/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemGetRequest' is not null or undefined
        if (itemGetRequest === null || itemGetRequest === undefined) {
            throw new Error('Required parameter itemGetRequest was null or undefined when calling itemGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemGetRequest, "ItemGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.  Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
     * @summary Import Item
     * @param itemImportRequest 
     */
    public async itemImport (itemImportRequest: ItemImportRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemImportResponse;  }> {
        const localVarPath = this.basePath + '/item/import';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemImportRequest' is not null or undefined
        if (itemImportRequest === null || itemImportRequest === undefined) {
            throw new Error('Required parameter itemImportRequest was null or undefined when calling itemImport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemImportRequest, "ItemImportRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemImportResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemImportResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes.  The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     * @summary Exchange public token for an access token
     * @param itemPublicTokenExchangeRequest 
     */
    public async itemPublicTokenExchange (itemPublicTokenExchangeRequest: ItemPublicTokenExchangeRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemPublicTokenExchangeResponse;  }> {
        const localVarPath = this.basePath + '/item/public_token/exchange';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemPublicTokenExchangeRequest' is not null or undefined
        if (itemPublicTokenExchangeRequest === null || itemPublicTokenExchangeRequest === undefined) {
            throw new Error('Required parameter itemPublicTokenExchangeRequest was null or undefined when calling itemPublicTokenExchange.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemPublicTokenExchangeRequest, "ItemPublicTokenExchangeRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemPublicTokenExchangeResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemPublicTokenExchangeResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/item/remove`  endpoint allows you to remove an Item. Once removed, the `access_token`  associated with the Item is no longer valid and cannot be used to access any data that was associated with the Item.  Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.  Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution\'s OAuth permission manager.  API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     * @summary Remove an Item
     * @param itemRemoveRequest 
     */
    public async itemRemove (itemRemoveRequest: ItemRemoveRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemRemoveResponse;  }> {
        const localVarPath = this.basePath + '/item/remove';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemRemoveRequest' is not null or undefined
        if (itemRemoveRequest === null || itemRemoveRequest === undefined) {
            throw new Error('Required parameter itemRemoveRequest was null or undefined when calling itemRemove.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemRemoveRequest, "ItemRemoveRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemRemoveResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemRemoveResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/webhooks/#item-webhook-update-acknowledged) webhook to the newly specified webhook URL.
     * @summary Update Webhook URL
     * @param itemWebhookUpdateRequest 
     */
    public async itemWebhookUpdate (itemWebhookUpdateRequest: ItemWebhookUpdateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ItemWebhookUpdateResponse;  }> {
        const localVarPath = this.basePath + '/item/webhook/update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'itemWebhookUpdateRequest' is not null or undefined
        if (itemWebhookUpdateRequest === null || itemWebhookUpdateRequest === undefined) {
            throw new Error('Required parameter itemWebhookUpdateRequest was null or undefined when calling itemWebhookUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(itemWebhookUpdateRequest, "ItemWebhookUpdateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ItemWebhookUpdateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ItemWebhookUpdateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).  The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.  Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     * @summary Retrieve Liabilities data
     * @param liabilitiesGetRequest 
     */
    public async liabilitiesGet (liabilitiesGetRequest: LiabilitiesGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LiabilitiesGetResponse;  }> {
        const localVarPath = this.basePath + '/liabilities/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'liabilitiesGetRequest' is not null or undefined
        if (liabilitiesGetRequest === null || liabilitiesGetRequest === undefined) {
            throw new Error('Required parameter liabilitiesGetRequest was null or undefined when calling liabilitiesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(liabilitiesGetRequest, "LiabilitiesGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LiabilitiesGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LiabilitiesGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.  A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     * @summary Create Link Token
     * @param linkTokenCreateRequest 
     */
    public async linkTokenCreate (linkTokenCreateRequest: LinkTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LinkTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/link/token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'linkTokenCreateRequest' is not null or undefined
        if (linkTokenCreateRequest === null || linkTokenCreateRequest === undefined) {
            throw new Error('Required parameter linkTokenCreateRequest was null or undefined when calling linkTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(linkTokenCreateRequest, "LinkTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LinkTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LinkTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the `/link/token/create` endpoint. It can be useful for debugging purposes.
     * @summary Get Link Token
     * @param linkTokenGetRequest 
     */
    public async linkTokenGet (linkTokenGetRequest: LinkTokenGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LinkTokenGetResponse;  }> {
        const localVarPath = this.basePath + '/link/token/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'linkTokenGetRequest' is not null or undefined
        if (linkTokenGetRequest === null || linkTokenGetRequest === undefined) {
            throw new Error('Required parameter linkTokenGetRequest was null or undefined when calling linkTokenGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(linkTokenGetRequest, "LinkTokenGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LinkTokenGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "LinkTokenGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.  Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.  In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     * @summary Create a payment
     * @param paymentInitiationPaymentCreateRequest 
     */
    public async paymentInitiationPaymentCreate (paymentInitiationPaymentCreateRequest: PaymentInitiationPaymentCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentCreateResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/payment/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationPaymentCreateRequest' is not null or undefined
        if (paymentInitiationPaymentCreateRequest === null || paymentInitiationPaymentCreateRequest === undefined) {
            throw new Error('Required parameter paymentInitiationPaymentCreateRequest was null or undefined when calling paymentInitiationPaymentCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationPaymentCreateRequest, "PaymentInitiationPaymentCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationPaymentCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     * @summary Get payment details
     * @param paymentInitiationPaymentGetRequest 
     */
    public async paymentInitiationPaymentGet (paymentInitiationPaymentGetRequest: PaymentInitiationPaymentGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentGetResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/payment/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationPaymentGetRequest' is not null or undefined
        if (paymentInitiationPaymentGetRequest === null || paymentInitiationPaymentGetRequest === undefined) {
            throw new Error('Required parameter paymentInitiationPaymentGetRequest was null or undefined when calling paymentInitiationPaymentGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationPaymentGetRequest, "PaymentInitiationPaymentGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationPaymentGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     * @summary List payments
     * @param paymentInitiationPaymentListRequest 
     */
    public async paymentInitiationPaymentList (paymentInitiationPaymentListRequest: PaymentInitiationPaymentListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentListResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/payment/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationPaymentListRequest' is not null or undefined
        if (paymentInitiationPaymentListRequest === null || paymentInitiationPaymentListRequest === undefined) {
            throw new Error('Required parameter paymentInitiationPaymentListRequest was null or undefined when calling paymentInitiationPaymentList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationPaymentListRequest, "PaymentInitiationPaymentListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationPaymentListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Reverse a previously initiated payment.  A payment can only be reversed once and will be refunded to the original sender\'s account. 
     * @summary Reverse an existing payment
     * @param paymentInitiationPaymentReverseRequest 
     */
    public async paymentInitiationPaymentReverse (paymentInitiationPaymentReverseRequest: PaymentInitiationPaymentReverseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentReverseResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/payment/reverse';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationPaymentReverseRequest' is not null or undefined
        if (paymentInitiationPaymentReverseRequest === null || paymentInitiationPaymentReverseRequest === undefined) {
            throw new Error('Required parameter paymentInitiationPaymentReverseRequest was null or undefined when calling paymentInitiationPaymentReverse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationPaymentReverseRequest, "PaymentInitiationPaymentReverseRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationPaymentReverseResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationPaymentReverseResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.  The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`. 
     * @summary Create payment recipient
     * @param paymentInitiationRecipientCreateRequest 
     */
    public async paymentInitiationRecipientCreate (paymentInitiationRecipientCreateRequest: PaymentInitiationRecipientCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientCreateResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/recipient/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationRecipientCreateRequest' is not null or undefined
        if (paymentInitiationRecipientCreateRequest === null || paymentInitiationRecipientCreateRequest === undefined) {
            throw new Error('Required parameter paymentInitiationRecipientCreateRequest was null or undefined when calling paymentInitiationRecipientCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationRecipientCreateRequest, "PaymentInitiationRecipientCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationRecipientCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get details about a payment recipient you have previously created.
     * @summary Get payment recipient
     * @param paymentInitiationRecipientGetRequest 
     */
    public async paymentInitiationRecipientGet (paymentInitiationRecipientGetRequest: PaymentInitiationRecipientGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientGetResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/recipient/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationRecipientGetRequest' is not null or undefined
        if (paymentInitiationRecipientGetRequest === null || paymentInitiationRecipientGetRequest === undefined) {
            throw new Error('Required parameter paymentInitiationRecipientGetRequest was null or undefined when calling paymentInitiationRecipientGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationRecipientGetRequest, "PaymentInitiationRecipientGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationRecipientGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     * @summary List payment recipients
     * @param paymentInitiationRecipientListRequest 
     */
    public async paymentInitiationRecipientList (paymentInitiationRecipientListRequest: PaymentInitiationRecipientListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientListResponse;  }> {
        const localVarPath = this.basePath + '/payment_initiation/recipient/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'paymentInitiationRecipientListRequest' is not null or undefined
        if (paymentInitiationRecipientListRequest === null || paymentInitiationRecipientListRequest === undefined) {
            throw new Error('Required parameter paymentInitiationRecipientListRequest was null or undefined when calling paymentInitiationRecipientList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(paymentInitiationRecipientListRequest, "PaymentInitiationRecipientListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PaymentInitiationRecipientListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PaymentInitiationRecipientListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     * @summary Create Apex bank account token
     * @param processorApexProcessorTokenCreateRequest 
     */
    public async processorApexProcessorTokenCreate (processorApexProcessorTokenCreateRequest: ProcessorApexProcessorTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/processor/apex/processor_token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorApexProcessorTokenCreateRequest' is not null or undefined
        if (processorApexProcessorTokenCreateRequest === null || processorApexProcessorTokenCreateRequest === undefined) {
            throw new Error('Required parameter processorApexProcessorTokenCreateRequest was null or undefined when calling processorApexProcessorTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorApexProcessorTokenCreateRequest, "ProcessorApexProcessorTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that\'\'s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.   Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14). 
     * @summary Retrieve Auth data
     * @param processorAuthGetRequest 
     */
    public async processorAuthGet (processorAuthGetRequest: ProcessorAuthGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorAuthGetResponse;  }> {
        const localVarPath = this.basePath + '/processor/auth/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorAuthGetRequest' is not null or undefined
        if (processorAuthGetRequest === null || processorAuthGetRequest === undefined) {
            throw new Error('Required parameter processorAuthGetRequest was null or undefined when calling processorAuthGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorAuthGetRequest, "ProcessorAuthGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorAuthGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorAuthGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for each of an Item\'s accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. 
     * @summary Retrieve Balance data
     * @param processorBalanceGetRequest The &#x60;/processor/balance/get&#x60; endpoint returns the real-time balance for the account associated with a given &#x60;processor_token&#x60;.  The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.  Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of &#x60;null&#x60;.
     */
    public async processorBalanceGet (processorBalanceGetRequest: ProcessorBalanceGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorBalanceGetResponse;  }> {
        const localVarPath = this.basePath + '/processor/balance/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorBalanceGetRequest' is not null or undefined
        if (processorBalanceGetRequest === null || processorBalanceGetRequest === undefined) {
            throw new Error('Required parameter processorBalanceGetRequest was null or undefined when calling processorBalanceGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorBalanceGetRequest, "ProcessorBalanceGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorBalanceGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorBalanceGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     * @summary Create a bank transfer as a processor
     * @param processorBankTransferCreateRequest 
     */
    public async processorBankTransferCreate (processorBankTransferCreateRequest: ProcessorBankTransferCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorBankTransferCreateResponse;  }> {
        const localVarPath = this.basePath + '/processor/bank_transfer/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorBankTransferCreateRequest' is not null or undefined
        if (processorBankTransferCreateRequest === null || processorBankTransferCreateRequest === undefined) {
            throw new Error('Required parameter processorBankTransferCreateRequest was null or undefined when calling processorBankTransferCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorBankTransferCreateRequest, "ProcessorBankTransferCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorBankTransferCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorBankTransferCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     * @summary Retrieve Identity data
     * @param processorIdentityGetRequest 
     */
    public async processorIdentityGet (processorIdentityGetRequest: ProcessorIdentityGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorIdentityGetResponse;  }> {
        const localVarPath = this.basePath + '/processor/identity/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorIdentityGetRequest' is not null or undefined
        if (processorIdentityGetRequest === null || processorIdentityGetRequest === undefined) {
            throw new Error('Required parameter processorIdentityGetRequest was null or undefined when calling processorIdentityGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorIdentityGetRequest, "ProcessorIdentityGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorIdentityGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorIdentityGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
     * @summary Create Stripe bank account token
     * @param processorStripeBankAccountTokenCreateRequest 
     */
    public async processorStripeBankAccountTokenCreate (processorStripeBankAccountTokenCreateRequest: ProcessorStripeBankAccountTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorStripeBankAccountTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/processor/stripe/bank_account_token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorStripeBankAccountTokenCreateRequest' is not null or undefined
        if (processorStripeBankAccountTokenCreateRequest === null || processorStripeBankAccountTokenCreateRequest === undefined) {
            throw new Error('Required parameter processorStripeBankAccountTokenCreateRequest was null or undefined when calling processorStripeBankAccountTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorStripeBankAccountTokenCreateRequest, "ProcessorStripeBankAccountTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorStripeBankAccountTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorStripeBankAccountTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Used to create a token suitable for sending to one of Plaid\'s partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations.
     * @summary Create processor token
     * @param processorTokenCreateRequest 
     */
    public async processorTokenCreate (processorTokenCreateRequest: ProcessorTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ProcessorTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/processor/token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'processorTokenCreateRequest' is not null or undefined
        if (processorTokenCreateRequest === null || processorTokenCreateRequest === undefined) {
            throw new Error('Required parameter processorTokenCreateRequest was null or undefined when calling processorTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(processorTokenCreateRequest, "ProcessorTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ProcessorTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ProcessorTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     * @summary Manually fire a Bank Transfer webhook
     * @param sandboxBankTransferFireWebhookRequest 
     */
    public async sandboxBankTransferFireWebhook (sandboxBankTransferFireWebhookRequest: SandboxBankTransferFireWebhookRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxBankTransferFireWebhookResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/bank_transfer/fire_webhook';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxBankTransferFireWebhookRequest' is not null or undefined
        if (sandboxBankTransferFireWebhookRequest === null || sandboxBankTransferFireWebhookRequest === undefined) {
            throw new Error('Required parameter sandboxBankTransferFireWebhookRequest was null or undefined when calling sandboxBankTransferFireWebhook.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxBankTransferFireWebhookRequest, "SandboxBankTransferFireWebhookRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxBankTransferFireWebhookResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxBankTransferFireWebhookResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a bank transfer event in Sandbox
     * @param sandboxBankTransferSimulateRequest 
     */
    public async sandboxBankTransferSimulate (sandboxBankTransferSimulateRequest: SandboxBankTransferSimulateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxBankTransferSimulateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/bank_transfer/simulate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxBankTransferSimulateRequest' is not null or undefined
        if (sandboxBankTransferSimulateRequest === null || sandboxBankTransferSimulateRequest === undefined) {
            throw new Error('Required parameter sandboxBankTransferSimulateRequest was null or undefined when calling sandboxBankTransferSimulate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxBankTransferSimulateRequest, "SandboxBankTransferSimulateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxBankTransferSimulateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxBankTransferSimulateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment.
     * @summary Manually fire an Income webhook
     * @param sandboxIncomeFireWebhookRequest 
     */
    public async sandboxIncomeFireWebhook (sandboxIncomeFireWebhookRequest: SandboxIncomeFireWebhookRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxIncomeFireWebhookResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/income/fire_webhook';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxIncomeFireWebhookRequest' is not null or undefined
        if (sandboxIncomeFireWebhookRequest === null || sandboxIncomeFireWebhookRequest === undefined) {
            throw new Error('Required parameter sandboxIncomeFireWebhookRequest was null or undefined when calling sandboxIncomeFireWebhook.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxIncomeFireWebhookRequest, "SandboxIncomeFireWebhookRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxIncomeFireWebhookResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxIncomeFireWebhookResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger a Transactions `DEFAULT_UPDATE` webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result. This endpoint can also trigger a `NEW_ACCOUNTS_AVAILABLE` webhook to be fired for a given Sandbox Item created with Account Select v2. Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     * @summary Fire a test webhook
     * @param sandboxItemFireWebhookRequest 
     */
    public async sandboxItemFireWebhook (sandboxItemFireWebhookRequest: SandboxItemFireWebhookRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxItemFireWebhookResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/item/fire_webhook';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxItemFireWebhookRequest' is not null or undefined
        if (sandboxItemFireWebhookRequest === null || sandboxItemFireWebhookRequest === undefined) {
            throw new Error('Required parameter sandboxItemFireWebhookRequest was null or undefined when calling sandboxItemFireWebhook.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxItemFireWebhookRequest, "SandboxItemFireWebhookRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxItemFireWebhookResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxItemFireWebhookResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link\'s [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.   In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     * @summary Force a Sandbox Item into an error state
     * @param sandboxItemResetLoginRequest 
     */
    public async sandboxItemResetLogin (sandboxItemResetLoginRequest: SandboxItemResetLoginRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxItemResetLoginResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/item/reset_login';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxItemResetLoginRequest' is not null or undefined
        if (sandboxItemResetLoginRequest === null || sandboxItemResetLoginRequest === undefined) {
            throw new Error('Required parameter sandboxItemResetLoginRequest was null or undefined when calling sandboxItemResetLogin.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxItemResetLoginRequest, "SandboxItemResetLoginRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxItemResetLoginResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxItemResetLoginResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.  Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).  For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     * @summary Set verification status for Sandbox account
     * @param sandboxItemSetVerificationStatusRequest 
     */
    public async sandboxItemSetVerificationStatus (sandboxItemSetVerificationStatusRequest: SandboxItemSetVerificationStatusRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxItemSetVerificationStatusResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/item/set_verification_status';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxItemSetVerificationStatusRequest' is not null or undefined
        if (sandboxItemSetVerificationStatusRequest === null || sandboxItemSetVerificationStatusRequest === undefined) {
            throw new Error('Required parameter sandboxItemSetVerificationStatusRequest was null or undefined when calling sandboxItemSetVerificationStatus.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxItemSetVerificationStatusRequest, "SandboxItemSetVerificationStatusRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxItemSetVerificationStatusResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxItemSetVerificationStatusResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @summary Save the selected accounts when connecting to the Platypus Oauth institution
     * @param sandboxOauthSelectAccountsRequest 
     */
    public async sandboxOauthSelectAccounts (sandboxOauthSelectAccountsRequest: SandboxOauthSelectAccountsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: { [key: string]: any; };  }> {
        const localVarPath = this.basePath + '/sandbox/oauth/select_accounts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxOauthSelectAccountsRequest' is not null or undefined
        if (sandboxOauthSelectAccountsRequest === null || sandboxOauthSelectAccountsRequest === undefined) {
            throw new Error('Required parameter sandboxOauthSelectAccountsRequest was null or undefined when calling sandboxOauthSelectAccounts.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxOauthSelectAccountsRequest, "SandboxOauthSelectAccountsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: { [key: string]: any; };  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "{ [key: string]: any; }");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     * @summary Create a test Item and processor token
     * @param sandboxProcessorTokenCreateRequest 
     */
    public async sandboxProcessorTokenCreate (sandboxProcessorTokenCreateRequest: SandboxProcessorTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxProcessorTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/processor_token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxProcessorTokenCreateRequest' is not null or undefined
        if (sandboxProcessorTokenCreateRequest === null || sandboxProcessorTokenCreateRequest === undefined) {
            throw new Error('Required parameter sandboxProcessorTokenCreateRequest was null or undefined when calling sandboxProcessorTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxProcessorTokenCreateRequest, "SandboxProcessorTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxProcessorTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxProcessorTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     * @summary Create a test Item
     * @param sandboxPublicTokenCreateRequest 
     */
    public async sandboxPublicTokenCreate (sandboxPublicTokenCreateRequest: SandboxPublicTokenCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxPublicTokenCreateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/public_token/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxPublicTokenCreateRequest' is not null or undefined
        if (sandboxPublicTokenCreateRequest === null || sandboxPublicTokenCreateRequest === undefined) {
            throw new Error('Required parameter sandboxPublicTokenCreateRequest was null or undefined when calling sandboxPublicTokenCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxPublicTokenCreateRequest, "SandboxPublicTokenCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxPublicTokenCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxPublicTokenCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     * @summary Trigger the creation of a repayment
     * @param sandboxTransferRepaymentSimulateRequest 
     */
    public async sandboxTransferRepaymentSimulate (sandboxTransferRepaymentSimulateRequest: SandboxTransferRepaymentSimulateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxTransferRepaymentSimulateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/transfer/repayment/simulate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxTransferRepaymentSimulateRequest' is not null or undefined
        if (sandboxTransferRepaymentSimulateRequest === null || sandboxTransferRepaymentSimulateRequest === undefined) {
            throw new Error('Required parameter sandboxTransferRepaymentSimulateRequest was null or undefined when calling sandboxTransferRepaymentSimulate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxTransferRepaymentSimulateRequest, "SandboxTransferRepaymentSimulateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxTransferRepaymentSimulateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxTransferRepaymentSimulateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     * @summary Simulate a transfer event in Sandbox
     * @param sandboxTransferSimulateRequest 
     */
    public async sandboxTransferSimulate (sandboxTransferSimulateRequest: SandboxTransferSimulateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxTransferSimulateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/transfer/simulate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxTransferSimulateRequest' is not null or undefined
        if (sandboxTransferSimulateRequest === null || sandboxTransferSimulateRequest === undefined) {
            throw new Error('Required parameter sandboxTransferSimulateRequest was null or undefined when calling sandboxTransferSimulate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxTransferSimulateRequest, "SandboxTransferSimulateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxTransferSimulateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxTransferSimulateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `reversed` transfers with a sweep status of `swept` will become `reverse_swept`.
     * @summary Simulate creating a sweep
     * @param sandboxTransferSweepSimulateRequest 
     */
    public async sandboxTransferSweepSimulate (sandboxTransferSweepSimulateRequest: SandboxTransferSweepSimulateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SandboxTransferSweepSimulateResponse;  }> {
        const localVarPath = this.basePath + '/sandbox/transfer/sweep/simulate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'sandboxTransferSweepSimulateRequest' is not null or undefined
        if (sandboxTransferSweepSimulateRequest === null || sandboxTransferSweepSimulateRequest === undefined) {
            throw new Error('Required parameter sandboxTransferSweepSimulateRequest was null or undefined when calling sandboxTransferSweepSimulate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sandboxTransferSweepSimulateRequest, "SandboxTransferSweepSimulateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SandboxTransferSweepSimulateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SandboxTransferSweepSimulateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`.
     * @summary Report whether you initiated an ACH transaction
     * @param signalDecisionReportRequest 
     */
    public async signalDecisionReport (signalDecisionReportRequest: SignalDecisionReportRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SignalDecisionReportResponse;  }> {
        const localVarPath = this.basePath + '/signal/decision/report';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'signalDecisionReportRequest' is not null or undefined
        if (signalDecisionReportRequest === null || signalDecisionReportRequest === undefined) {
            throw new Error('Required parameter signalDecisionReportRequest was null or undefined when calling signalDecisionReport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(signalDecisionReportRequest, "SignalDecisionReportRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SignalDecisionReportResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SignalDecisionReportResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.  In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     * @summary Evaluate a planned ACH transaction
     * @param signalEvaluateRequest 
     */
    public async signalEvaluate (signalEvaluateRequest: SignalEvaluateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SignalEvaluateResponse;  }> {
        const localVarPath = this.basePath + '/signal/evaluate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'signalEvaluateRequest' is not null or undefined
        if (signalEvaluateRequest === null || signalEvaluateRequest === undefined) {
            throw new Error('Required parameter signalEvaluateRequest was null or undefined when calling signalEvaluate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(signalEvaluateRequest, "SignalEvaluateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SignalEvaluateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SignalEvaluateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the foo to incorporate the latest risk trend in your portfolio.
     * @summary Report a return for an ACH transaction
     * @param signalReturnReportRequest 
     */
    public async signalReturnReport (signalReturnReportRequest: SignalReturnReportRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: SignalReturnReportResponse;  }> {
        const localVarPath = this.basePath + '/signal/return/report';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'signalReturnReportRequest' is not null or undefined
        if (signalReturnReportRequest === null || signalReturnReportRequest === undefined) {
            throw new Error('Required parameter signalReturnReportRequest was null or undefined when calling signalReturnReport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(signalReturnReportRequest, "SignalReturnReportRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: SignalReturnReportResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "SignalReturnReportResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products#investments) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.  Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).  Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.  Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item\'s `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.  Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn\'t. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     * @summary Get transaction data
     * @param transactionsGetRequest 
     */
    public async transactionsGet (transactionsGetRequest: TransactionsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransactionsGetResponse;  }> {
        const localVarPath = this.basePath + '/transactions/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transactionsGetRequest' is not null or undefined
        if (transactionsGetRequest === null || transactionsGetRequest === undefined) {
            throw new Error('Required parameter transactionsGetRequest was null or undefined when calling transactionsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transactionsGetRequest, "TransactionsGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransactionsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransactionsGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transactions/recurring/get` endpoint identifies and returns groups of transactions that occur on a regular basis for the inputted Item and accounts.  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Get streams of recurring transactions
     * @param transactionsRecurringGetRequest 
     */
    public async transactionsRecurringGet (transactionsRecurringGetRequest: TransactionsRecurringGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransactionsRecurringGetResponse;  }> {
        const localVarPath = this.basePath + '/transactions/recurring/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transactionsRecurringGetRequest' is not null or undefined
        if (transactionsRecurringGetRequest === null || transactionsRecurringGetRequest === undefined) {
            throw new Error('Required parameter transactionsRecurringGetRequest was null or undefined when calling transactionsRecurringGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transactionsRecurringGetRequest, "TransactionsRecurringGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransactionsRecurringGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransactionsRecurringGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/webhooks#deleted-transactions-detected) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/webhooks#transactions-default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.  Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     * @summary Refresh transaction data
     * @param transactionsRefreshRequest 
     */
    public async transactionsRefresh (transactionsRefreshRequest: TransactionsRefreshRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransactionsRefreshResponse;  }> {
        const localVarPath = this.basePath + '/transactions/refresh';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transactionsRefreshRequest' is not null or undefined
        if (transactionsRefreshRequest === null || transactionsRefreshRequest === undefined) {
            throw new Error('Required parameter transactionsRefreshRequest was null or undefined when calling transactionsRefresh.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transactionsRefreshRequest, "TransactionsRefreshRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransactionsRefreshResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransactionsRefreshResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transactions/sync` endpoint returns item transactions as a set of delta updates. Subsequent calls to the endpoint using the cursor returned in the response will return new added, modified, and removed transactions since the last call to the endpoint  The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     * @summary Get incremental transaction updates on an Item
     * @param transactionsSyncRequest 
     */
    public async transactionsSync (transactionsSyncRequest: TransactionsSyncRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransactionsSyncResponse;  }> {
        const localVarPath = this.basePath + '/transactions/sync';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transactionsSyncRequest' is not null or undefined
        if (transactionsSyncRequest === null || transactionsSyncRequest === undefined) {
            throw new Error('Required parameter transactionsSyncRequest was null or undefined when calling transactionsSync.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transactionsSyncRequest, "TransactionsSyncRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransactionsSyncResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransactionsSyncResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.  In Plaid\'s sandbox environment the decisions will be returned as follows:    - To approve a transfer, make an authorization request with an `amount` less than the available balance in the account.    - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.    - To permit a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).    - To permit a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).  All username/password combinations other than the ones listed above will result in a decision of permitted and rationale code `ERROR`.
     * @summary Create a transfer authorization
     * @param transferAuthorizationCreateRequest 
     */
    public async transferAuthorizationCreate (transferAuthorizationCreateRequest: TransferAuthorizationCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferAuthorizationCreateResponse;  }> {
        const localVarPath = this.basePath + '/transfer/authorization/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferAuthorizationCreateRequest' is not null or undefined
        if (transferAuthorizationCreateRequest === null || transferAuthorizationCreateRequest === undefined) {
            throw new Error('Required parameter transferAuthorizationCreateRequest was null or undefined when calling transferAuthorizationCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferAuthorizationCreateRequest, "TransferAuthorizationCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferAuthorizationCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferAuthorizationCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`.
     * @summary Cancel a transfer
     * @param transferCancelRequest 
     */
    public async transferCancel (transferCancelRequest: TransferCancelRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferCancelResponse;  }> {
        const localVarPath = this.basePath + '/transfer/cancel';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferCancelRequest' is not null or undefined
        if (transferCancelRequest === null || transferCancelRequest === undefined) {
            throw new Error('Required parameter transferCancelRequest was null or undefined when calling transferCancel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferCancelRequest, "TransferCancelRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferCancelResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferCancelResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/create` endpoint to initiate a new transfer.
     * @summary Create a transfer
     * @param transferCreateRequest 
     */
    public async transferCreate (transferCreateRequest: TransferCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferCreateResponse;  }> {
        const localVarPath = this.basePath + '/transfer/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferCreateRequest' is not null or undefined
        if (transferCreateRequest === null || transferCreateRequest === undefined) {
            throw new Error('Required parameter transferCreateRequest was null or undefined when calling transferCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferCreateRequest, "TransferCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     * @summary List transfer events
     * @param transferEventListRequest 
     */
    public async transferEventList (transferEventListRequest: TransferEventListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferEventListResponse;  }> {
        const localVarPath = this.basePath + '/transfer/event/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferEventListRequest' is not null or undefined
        if (transferEventListRequest === null || transferEventListRequest === undefined) {
            throw new Error('Required parameter transferEventListRequest was null or undefined when calling transferEventList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferEventListRequest, "TransferEventListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferEventListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferEventListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     * @summary Sync transfer events
     * @param transferEventSyncRequest 
     */
    public async transferEventSync (transferEventSyncRequest: TransferEventSyncRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferEventSyncResponse;  }> {
        const localVarPath = this.basePath + '/transfer/event/sync';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferEventSyncRequest' is not null or undefined
        if (transferEventSyncRequest === null || transferEventSyncRequest === undefined) {
            throw new Error('Required parameter transferEventSyncRequest was null or undefined when calling transferEventSync.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferEventSyncRequest, "TransferEventSyncRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferEventSyncResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferEventSyncResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`.
     * @summary Retrieve a transfer
     * @param transferGetRequest 
     */
    public async transferGet (transferGetRequest: TransferGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferGetResponse;  }> {
        const localVarPath = this.basePath + '/transfer/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferGetRequest' is not null or undefined
        if (transferGetRequest === null || transferGetRequest === undefined) {
            throw new Error('Required parameter transferGetRequest was null or undefined when calling transferGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferGetRequest, "TransferGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     * @summary Create a transfer intent object to invoke the Transfer UI
     * @param transferIntentCreateRequest 
     */
    public async transferIntentCreate (transferIntentCreateRequest: TransferIntentCreateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferIntentCreateResponse;  }> {
        const localVarPath = this.basePath + '/transfer/intent/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferIntentCreateRequest' is not null or undefined
        if (transferIntentCreateRequest === null || transferIntentCreateRequest === undefined) {
            throw new Error('Required parameter transferIntentCreateRequest was null or undefined when calling transferIntentCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferIntentCreateRequest, "TransferIntentCreateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferIntentCreateResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferIntentCreateResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     * @summary Retrieve more information about a transfer intent
     * @param requestBody 
     */
    public async transferIntentGet (requestBody: { [key: string]: any; }, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferIntentGetResponse;  }> {
        const localVarPath = this.basePath + '/transfer/intent/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling transferIntentGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(requestBody, "{ [key: string]: any; }")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferIntentGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferIntentGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. 
     * @summary List transfers
     * @param transferListRequest 
     */
    public async transferList (transferListRequest: TransferListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferListResponse;  }> {
        const localVarPath = this.basePath + '/transfer/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferListRequest' is not null or undefined
        if (transferListRequest === null || transferListRequest === undefined) {
            throw new Error('Required parameter transferListRequest was null or undefined when calling transferList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferListRequest, "TransferListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     * @summary Lists historical repayments
     * @param transferRepaymentListRequest 
     */
    public async transferRepaymentList (transferRepaymentListRequest: TransferRepaymentListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferRepaymentListResponse;  }> {
        const localVarPath = this.basePath + '/transfer/repayment/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferRepaymentListRequest' is not null or undefined
        if (transferRepaymentListRequest === null || transferRepaymentListRequest === undefined) {
            throw new Error('Required parameter transferRepaymentListRequest was null or undefined when calling transferRepaymentList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferRepaymentListRequest, "TransferRepaymentListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferRepaymentListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferRepaymentListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     * @summary List the returns included in a repayment
     * @param transferRepaymentReturnListRequest 
     */
    public async transferRepaymentReturnList (transferRepaymentReturnListRequest: TransferRepaymentReturnListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferRepaymentReturnListResponse;  }> {
        const localVarPath = this.basePath + '/transfer/repayment/return/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferRepaymentReturnListRequest' is not null or undefined
        if (transferRepaymentReturnListRequest === null || transferRepaymentReturnListRequest === undefined) {
            throw new Error('Required parameter transferRepaymentReturnListRequest was null or undefined when calling transferRepaymentReturnList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferRepaymentReturnListRequest, "TransferRepaymentReturnListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferRepaymentReturnListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferRepaymentReturnListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     * @summary Retrieve a sweep
     * @param transferSweepGetRequest 
     */
    public async transferSweepGet (transferSweepGetRequest: TransferSweepGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferSweepGetResponse;  }> {
        const localVarPath = this.basePath + '/transfer/sweep/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferSweepGetRequest' is not null or undefined
        if (transferSweepGetRequest === null || transferSweepGetRequest === undefined) {
            throw new Error('Required parameter transferSweepGetRequest was null or undefined when calling transferSweepGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferSweepGetRequest, "TransferSweepGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferSweepGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferSweepGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     * @summary List sweeps
     * @param transferSweepListRequest 
     */
    public async transferSweepList (transferSweepListRequest: TransferSweepListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TransferSweepListResponse;  }> {
        const localVarPath = this.basePath + '/transfer/sweep/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'transferSweepListRequest' is not null or undefined
        if (transferSweepListRequest === null || transferSweepListRequest === undefined) {
            throw new Error('Required parameter transferSweepListRequest was null or undefined when calling transferSweepList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(transferSweepListRequest, "TransferSweepListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TransferSweepListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "TransferSweepListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetch an e-wallet. The response includes the current balance. 
     * @summary Fetch an e-wallet
     * @param walletGetRequest 
     */
    public async walletGet (walletGetRequest: WalletGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: WalletGetResponse;  }> {
        const localVarPath = this.basePath + '/wallet/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'walletGetRequest' is not null or undefined
        if (walletGetRequest === null || walletGetRequest === undefined) {
            throw new Error('Required parameter walletGetRequest was null or undefined when calling walletGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(walletGetRequest, "WalletGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: WalletGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "WalletGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Execute a transaction using the specified e-wallet. Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate payouts, the amount and reference for the payout. The payouts are executed over the Faster Payment rails, where settlement usually only takes a few seconds. 
     * @summary Execute a transaction using an e-wallet
     * @param walletTransactionExecuteRequest 
     */
    public async walletTransactionExecute (walletTransactionExecuteRequest: WalletTransactionExecuteRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: WalletTransactionExecuteResponse;  }> {
        const localVarPath = this.basePath + '/wallet/transaction/execute';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'walletTransactionExecuteRequest' is not null or undefined
        if (walletTransactionExecuteRequest === null || walletTransactionExecuteRequest === undefined) {
            throw new Error('Required parameter walletTransactionExecuteRequest was null or undefined when calling walletTransactionExecute.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(walletTransactionExecuteRequest, "WalletTransactionExecuteRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: WalletTransactionExecuteResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "WalletTransactionExecuteResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. 
     * @summary List e-wallet transactions
     * @param walletTransactionsListRequest 
     */
    public async walletTransactionsList (walletTransactionsListRequest: WalletTransactionsListRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: WalletTransactionsListResponse;  }> {
        const localVarPath = this.basePath + '/wallet/transactions/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'walletTransactionsListRequest' is not null or undefined
        if (walletTransactionsListRequest === null || walletTransactionsListRequest === undefined) {
            throw new Error('Required parameter walletTransactionsListRequest was null or undefined when calling walletTransactionsList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(walletTransactionsListRequest, "WalletTransactionsListRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: WalletTransactionsListResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "WalletTransactionsListResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.  The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     * @summary Get webhook verification key
     * @param webhookVerificationKeyGetRequest 
     */
    public async webhookVerificationKeyGet (webhookVerificationKeyGetRequest: WebhookVerificationKeyGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: WebhookVerificationKeyGetResponse;  }> {
        const localVarPath = this.basePath + '/webhook_verification_key/get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'webhookVerificationKeyGetRequest' is not null or undefined
        if (webhookVerificationKeyGetRequest === null || webhookVerificationKeyGetRequest === undefined) {
            throw new Error('Required parameter webhookVerificationKeyGetRequest was null or undefined when calling webhookVerificationKeyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(webhookVerificationKeyGetRequest, "WebhookVerificationKeyGetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.clientId.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.clientId.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.plaidVersion.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.plaidVersion.applyToRequest(localVarRequestOptions));
        }
        if (this.authentications.secret.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.secret.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: WebhookVerificationKeyGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "WebhookVerificationKeyGetResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
